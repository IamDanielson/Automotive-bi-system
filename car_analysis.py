# -*- coding: utf-8 -*-
"""Car analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uD3Panu8ER5noYTrMlshIvCLlPO47ENn
"""

!pip install pandas matplotlib seaborn textblob wordcloud

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from textblob import TextBlob
from wordcloud import WordCloud

car_reviews = pd.read_csv("/content/car_reviews.csv")
article_news = pd.read_csv("/content/article_news.csv")

#Data Preprocessing
print(car_reviews.head())
print("\nData types of car_reviews:")
print(car_reviews.dtypes)

#Check for Duplicates
print(car_reviews.duplicated().sum())
print(article_news.duplicated().sum())

print(article_news.head())
print("\nData types of article_news:")
print(article_news.dtypes)

# Define function for sentiment analysis
def get_sentiment(text):
    if pd.isna(text):  # Handle missing values
        return None, None
    analysis = TextBlob(str(text))
    polarity = analysis.sentiment.polarity
    subjectivity = analysis.sentiment.subjectivity
    return polarity, subjectivity

#Apply sentiment to 'verdict' column (can also try 'title')
for df in [car_reviews, article_news]:
    df[["polarity", "subjectivity"]] = df["title"].apply(lambda x: pd.Series(get_sentiment(x)))

# Categorize sentiment
def categorize_sentiment(p):
    if p > 0.1:
        return "Positive"
    elif p < -0.1:
        return "Negative"
    else:
        return "Neutral"

for df in [car_reviews, article_news]:
    df["sentiment"] = df["polarity"].apply(categorize_sentiment)

# Visualization - Sentiment Distribution
plt.figure(figsize=(10,4))
sns.countplot(data=car_reviews, x="sentiment", palette="Set2")
plt.title("Car Reviews Sentiment Distribution")
plt.show()

plt.figure(figsize=(10,4))
sns.countplot(data=article_news, x="sentiment", palette="Set1")
plt.title("Article News Sentiment Distribution")
plt.show()

# Step 9: Word Cloud for Car Reviews
text = " ".join(str(review) for review in car_reviews["verdict"].dropna())
wordcloud = WordCloud(width=800, height=400, background_color="white").generate(text)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.title("Word Cloud - Car Reviews Verdict")
plt.show()

# Step 10: Word Cloud for Article News
text = " ".join(str(review) for review in article_news["title"].dropna())
wordcloud = WordCloud(width=800, height=400, background_color="white").generate(text)

plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.title("Word Cloud - Article News Verdict")
plt.show()



# Add a 'dataset' column to distinguish both
car_reviews["dataset"] = "Car Reviews"
article_news["dataset"] = "Article News"

# Combine both datasets
combined_df = pd.concat([car_reviews, article_news])

# Comparison Plot
plt.figure(figsize=(10,4))
sns.countplot(data=combined_df, x="sentiment", hue="dataset", palette="Set2")
plt.title("Sentiment Comparison: Car Reviews vs Article News")
plt.xlabel("Sentiment")
plt.ylabel("Count")
plt.legend(title="Dataset")
plt.show()

# Average polarity comparison
plt.figure(figsize=(10,4))
sns.barplot(data=combined_df, x="dataset", y="polarity", ci=None, palette="coolwarm")
plt.title("Average Sentiment Polarity by Dataset")
plt.ylabel("Average Polarity")
plt.show()



positive_text = " ".join(filtered_df[filtered_df["polarity"] > 0]["verdict"].astype(str))
negative_text = " ".join(filtered_df[filtered_df["polarity"] < 0]["verdict"].astype(str))


wordcloud_pos = WordCloud(width=800, height=400, background_color="white", colormap="Greens").generate(positive_text)
wordcloud_neg = WordCloud(width=800, height=400, background_color="white", colormap="Reds").generate(negative_text)


fig, ax = plt.subplots(1, 2, figsize=(16,8))
ax[0].imshow(wordcloud_pos, interpolation="bilinear")
ax[0].set_title("Positive Sentiment Word Cloud", fontsize=16)
ax[0].axis("off")

ax[1].imshow(wordcloud_neg, interpolation="bilinear")
ax[1].set_title("Negative Sentiment Word Cloud", fontsize=16)
ax[1].axis("off")

plt.show()



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Define rating categories (for 1â€“5 scale)
def categorize_rating(r):
    if r >= 4:      # 4-5 = High
        return "High"
    elif r >= 2.5:  # 2.5-3.9 = Medium
        return "Medium"
    else:           # 1-2.4 = Low
        return "Low"

car_reviews['rating_category'] = car_reviews['rating'].apply(categorize_rating)

print(car_reviews['rating_category'].value_counts())


sentiment_means = car_reviews.groupby('rating_category')['polarity'].mean()
print("\nAverage Sentiment per Category:\n", sentiment_means)

price_means = car_reviews.groupby('rating_category')['price'].mean()
print("\nAverage Price per Category:\n", price_means)


plt.figure(figsize=(12,6))


plt.subplot(1,2,1)
sns.boxplot(data=car_reviews, x='rating_category', y='polarity', palette='coolwarm')
plt.title("Sentiment Distribution by Rating Category")

plt.subplot(1,2,2)
sns.boxplot(data=car_reviews, x='rating_category', y='price', palette='viridis')
plt.title("Price Distribution by Rating Category")

plt.tight_layout()
plt.show()

